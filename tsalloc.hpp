#pragma once

#if (__cplusplus >= 201703L) // C++17 and higher

/**
 * @file tsalloc.hpp
 * @brief Thread-safe memory allocator, supports C++17 standard and higher.
 * The module interface placed in 'tsa::' namespace.
 * 'cstdint' defined in header.
 */

/**
 * @include cstdint Provides fixed-size macrose uintptr_t for machine word.
 */
#include <cstdint>

/// @namespace tsa Thread-safe allocator namespace
namespace tsa {
    /// Payload type to point to the correct place in the memory block.
    using word_t = uintptr_t; // machine word

    /**
     * @brief Allocates a memory block of 'size' bytes.
     * @param size Takes the bytes number generated by sizeof(type) function.
     * @return Returns payload pointer of generated memory block.
     */
    word_t* alloc(size_t size);

    /**
     * @brief Deallocates provided memory from pointer.
     * @param Takes payload pointer to the memory block.
     */
    void free(word_t* data);

    /**
     * @brief Print to console [BLOCK_SIZE, USED_BITES] allocated memory form.
     */
    void printBlocks();
}

#endif // (__cplusplus >= 201703L)